import tkinter as tk
import os
from tkinter import *
from tkinter import ttk
from tkinter import messagebox
from PIL import ImageTk, Image
from tkinter import filedialog
from functools import partial
import time
"""
NEED TO TURN THIS INTO A HUGE CLASS TO BE USED WITHOUT ANY GLOBALS, AND COMPLETELY UNIVERSAL
TRANSFER FILE OF PICS FOR GUI TO THIS TO
"""
window = tk.Tk()
window.title("Name")
window.configure(bg="#333333")

screen_width = window.winfo_screenwidth()
screen_height = window.winfo_screenheight()

window_scale_length = .85
window_height_scale = 2.6
window_width = int(screen_width * window_scale_length)
window_height = int(screen_height // window_height_scale)
window.maxsize(window_width, window_height)
window.minsize(window_width, window_height)
window.geometry(f"{window_width}x{window_height}+0+{screen_height//2}")


class MyEmployeeGUI:
    button_labels = ["Home", "Post", "Cross Post", "Relisting/Organizer", "Review", "Follow", 'Item Finder' ,'Statistics']
    def __init__(self):
        #! state attributes
        self.dp_state = False
        self.gr_state = False
        self.posh_state = False
        self.ebay_state = False
        self.mercari_state = False
        self.ou_state = False
        # self.etsy_state = False #! these 2 will be added soon
        # self.fbm_state = False

        #! button attributes
        self.dp_button = None
        self.gr_button = None
        self.posh_button = None
        self.ebay_button = None
        self.mercari_button = None
        self.ou_button = None

        #! img_attributes
        self.dp_img = self.finding_image_path('DepopProfilePic.png')
        self.gr_img = self.finding_image_path('GrailedProfilePic.png')
        self.posh_img = self.finding_image_path('PoshmarkProfilePic.jpg')
        self.ebay_img = self.finding_image_path('EbayProfilePic.jpg')
        self.mercari_img = self.finding_image_path('MercariProfilePic.webp')
        self.ou_img = self.finding_image_path('OfferUpProfilePic.png')

        #! Toggle Button States
        self.iterator = 0
        self.selected_platforms = []
        self.smaller_icon_labels = {}
        
        #!Changing Layout Buttons
        self.buttons = []
        # self.dirr_path = os.path.dirname(os.path.abspath(__file__))   #! this might not be needed
        

        #! Post Information Lists
        self.overall_photo_list = []
        self.current_showing_photo_list = []
        self.number_of_pic_list = []
        self.text_entry_text_list = []
        self.price_entry_text_list = []
        self.number_of_pics_entry_list = []
        self.current_pic_index = []
        self.post_information_list = [self.overall_photo_list, self.current_showing_photo_list, self.number_of_pic_list, self.text_entry_text_list, self.price_entry_text_list, self.number_of_pics_entry_list, self.current_pic_index]

        #! Widget Attributes Lists
        self.text_entry_widget_list = []
        self.price_entry_widget_list = []
        self.add_image_widget_list = []
        self.previous_button_widget_list = []
        self.next_button_widget_list = []
        self.image_label_widget_list = []
        self.delete_button_widget_list = []
        self.delete_post_button_widget_list = []
        self.widget_lists = [self.text_entry_widget_list, self.price_entry_widget_list, self.add_image_widget_list, self.previous_button_widget_list, self.next_button_widget_list, self.image_label_widget_list, self.delete_button_widget_list, self.delete_post_button_widget_list] #? WHY WAS self.number_of_pics_entry_lists in here?

 #TODO --------------------------------------------------------------------------------------------------------------------------------------------------------
 #TODO GENERAL METHODS USED THROUGHOUT THE PROGRAM
    def run(self):
        window.mainloop()

    def remove_posting_cross_posting_layout(self):
        global posting_title, start_button, iterator, crossposting_title, review_title, relister_title
        global dp_state, gr_state, posh_state, ebay_state, mercari_state, ou_state, smaller_icon_label, smaller_icon_labels
        global time_filter_dropdown, message_text, filter_by_message, add_messages_checkbox, write_reviews_checkbox
        global dp_button_click, gr_button_click, ebay_button_click, posh_button_click, mercari_button_click, ou_button_click

        buttons = ['ou_button', 'mercari_button', 'dp_button', 'gr_button', 'ebay_button', 'posh_button']

        for button in buttons:
            try:
                getattr(self, button).place_forget()
            except:
                pass

        self.iterator = 0

        state_func_map = {
            'dp_state': self.dp_button_click,
            'gr_state': self.gr_button_click,
            'posh_state': self.posh_button_click,
            'ebay_state': self.ebay_button_click,
            'mercari_state': self.mercari_button_click,
            'ou_state': self.ou_button_click
        }
        for state, func in state_func_map.items():
            try:
                if getattr(self, state):
                    func()
            except:
                pass

        self.false_state()
        widgets = [posting_title, crossposting_title, review_title, relister_title, follow_title, start_button, start_button1, time_filter_dropdown,
                message_text, filter_by_message, add_messages_checkbox, write_reviews_checkbox, advertise_stats, basic_statistics, customer_support,
                statistics_image, auto_fill_button, fill_in_post, sold_need_to_ship, current_messages, current_offers, smaller_icon_label]
                    #! smaller icon label might have a little more to it left to do to be complete
        for widget in widgets:
            try:
                widget.place_forget()
            except NameError:
                pass

        try:
            self.smaller_icon_labels.clear()
            print('smaller_icon_labels' + str(len(self.smaller_icon_labels)))
        except:
            print('smaller icon labels cleared')

    def finding_image_path(self, software_path, length=150, width=150):
        img_init = Image.open(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'ProgramImages', software_path))
        img_resize = img_init.resize((length, width))
        act_img = ImageTk.PhotoImage(img_resize)
        return act_img

    def false_state(self, platform=None):
        self.dp_state = False
        self.gr_state = False
        self.posh_state = False
        self.ebay_state = False
        self.mercari_state = False
        self.ou_state = False

        if platform is not None:
            if platform == 'dp':
                self.dp_state = True
            elif platform == 'gr':
                self.gr_state = True
            elif platform == 'posh':
                self.posh_state = True
            elif platform == 'ebay':
                self.ebay_state = True
            elif platform == 'mercari':
                self.mercari_state = True
            elif platform == 'ou':
                self.ou_state = True

    def button_image_upload(self, programs):
        """
        i think i will do 1 where they can buy 1, 3 or all, if they have 1, the image will only be the 1, 3 then the and all will be all
        this is the default priority though
        """
        positions = [(400, 150), (700, 150), (1000, 150), (400, 350), (700, 350), (1000, 350)] #! May need to adjust or change for future if adding more programs
        program_button_dict = {
            'dp': self.dp_button_image,
            'gr': self.gr_button_image,
            'posh': self.posh_button_image,
            'ebay': self.ebay_button_image,
            'mercari': self.mercari_button_image,
            'ou': self.ou_button_image
        }
        if programs == 'all':
            programs = ['dp', 'gr', 'posh', 'ebay', 'mercari', 'ou']

        for p, program in enumerate(programs):
            func = partial(program_button_dict[program], *positions[p])
            func()

    def toggle_button_states(self, button, state, img):
        if state:
            button.config(relief="sunken", bg="gray")
            resized_image = img.resize((100, 100))
            resized_photo = ImageTk.PhotoImage(resized_image)
            smaller_icon_label = tk.Label(window, image=resized_photo, borderwidth=0, highlightthickness=0)
            #! find a way to create an argument for the x, to either be 7oo or 400 + iterator * 125
            smaller_icon_label.place(x=400 + (self.iterator * 125), y=700)
            #! some of the icons the only difference is just the smaller_icon_label x y position, 
            smaller_icon_label.image = resized_photo
            self.smaller_icon_labels[button] = smaller_icon_label
            self.selected_platforms.append(button)
            self.iterator += 1
        else:
            button.config(relief="raised", bg="SystemButtonFace")
            if button in self.smaller_icon_labels:
                self.iterator -= 1
                smaller_icon_label = self.smaller_icon_labels.pop(button)
                smaller_icon_label.destroy()
                for i, label in enumerate(self.smaller_icon_labels.values()):
                    x_pos = 400 + (i * 125)
                    label.place(x=x_pos, y=700)

    def button_click(self, platform):
        platform_state = platform + "_state"
        platform_button = platform + "_button"
        platform_image = platform + "_image"

        setattr(self, platform_state, not getattr(self, platform_state))
        self.toggle_button_state(getattr(self, platform_button), getattr(self, platform_state), getattr(self, platform_image))

    def dp_button_image(self, x_axis, y_axis):
        self.dp_button = tk.Button(window, highlightthickness=0, relief="raised", command=partial(self.button_click, 'dp'))
        self.dp_button.config(image=self.dp_img, borderwidth=0, highlightthickness=0)
        self.dp_button.place(x=x_axis, y=y_axis)

    def gr_button_image(self, x_axis, y_axis):
        self.gr_button = tk.Button(window, highlightthickness=0, relief="raised", command=partial(self.button_click, 'gr'))
        self.gr_button.config(image=self.gr_img, borderwidth=0, highlightthickness=0)
        self.gr_button.place(x=x_axis, y=y_axis)

    def posh_button_image(self, x_axis, y_axis):
        self.posh_button = tk.Button(window, highlightthickness=0, relief="raised", command=partial(self.button_click, 'posh'))
        self.posh_button.config(image=self.posh_img, borderwidth=0, highlightthickness=0)
        self.posh_button.place(x=x_axis, y=y_axis)

    def ebay_button_image(self, x_axis, y_axis):
        self.ebay_button = tk.Button(window, highlightthickness=0, relief="raised", command=partial(self.button_click, 'ebay'))
        self.ebay_button.config(image=self.ebay_img, borderwidth=0, highlightthickness=0)
        self.ebay_button.place(x=x_axis, y=y_axis)

    def mercari_button_image(self, x_axis, y_axis):
        self.mercari_button = tk.Button(window, highlightthickness=0, relief="raised", command=partial(self.button_click, 'mercari'))
        self.mercari_button.config(image=self.mercari_img, borderwidth=0, highlightthickness=0)
        self.mercari_button.place(x=x_axis, y=y_axis)

    def ou_button_image(self, x_axis, y_axis):
        self.ou_button = tk.Button(window, highlightthickness=0, relief="raised", command=partial(self.button_click, 'ou'))
        self.ou_button.config(image=self.ou_img, borderwidth=0, highlightthickness=0)
        self.ou_button.place(x=x_axis, y=y_axis)
#TODO --------------------------------------------------------------------------------------------------------------------------------------------------------
#TODO where we switch from home page to home page
    def update_button_relief(self, index):
        # Reset relief for all buttons
        for button in self.buttons:
            button.configure(relief=tk.RAISED)
        buttons[index].configure(relief=tk.SUNKEN)

    def home_button_click(self):
        print("Home button clicked")
        self.update_button_relief(0)
        remove_posting_cross_posting_layout()
        home_button_layout()

    def posting_button_click(self):
        print("Posting button clicked")
        self.update_button_relief(1)
        remove_posting_cross_posting_layout()
        posting_layout()

    def cross_poster_button_click(self):
        print("Cross Poster button clicked")
        self.update_button_relief(2)
        remove_posting_cross_posting_layout()
        cross_posting_layout()

    def relisting_button_click(self):
        print("Relisting/Menu Organizer button clicked")
        self.update_button_relief(3)
        remove_posting_cross_posting_layout()
        relister_layout()

    def review_button_click(self):
        print("Review button clicked")
        self.update_button_relief(4)
        remove_posting_cross_posting_layout()
        review_layout()

    def follow_like_button_click(self):
        print("Follow/Like button clicked")
        self.update_button_relief(5)
        remove_posting_cross_posting_layout()
        follow_layout()

    def item_finder_click(self):
        print('Item finder has been clicked')
        self.update_button_relief(6)
        remove_posting_cross_posting_layout()

    def statistics_button_click(self):
        #! May need to add self.false_state() here
        print('Statistics r has been clicked')
        self.update_button_relief(7)
        remove_posting_cross_posting_layout()

#add button images to all of these and just adjust the arguments
#TODO --------------------------------------------------------------------------------------------------------------------------------------------------------
#TODO OVERALL POSTING PAGES/LAYOUTS FOR EACH TAB

    def posting_layout(self):
        global ou_button, mercari_button, dp_button, gr_button, ebay_button, posh_button
        global posting_title, start_button
        global dp_button_click, gr_button_click, ebay_button_click, posh_button_click, mercari_button_click, ou_button_click
        iterator = 0
        self.false_state()
        def toggle_button_states(self, button, state, img):
            nonlocal iterator
            if state:
                button.config(relief="sunken", bg="gray")
                resized_image = img.resize((100, 100))
                resized_photo = ImageTk.PhotoImage(resized_image)
                smaller_icon_label = tk.Label(window, image=resized_photo, borderwidth=0, highlightthickness=0)
                smaller_icon_label.place(x=400 + (iterator * 125), y=700)
                smaller_icon_label.image = resized_photo
                self.smaller_icon_labels[button] = smaller_icon_label
                self.selected_platforms.append(button)
                iterator += 1
            else:
                button.config(relief="raised", bg="SystemButtonFace")
                if button in smaller_icon_labels:
                    iterator -= 1
                    smaller_icon_label = smaller_icon_labels.pop(button)
                    smaller_icon_label.destroy()
                    for i, lbl in enumerate(self.smaller_icon_labels.values()):
                        x_pos = 400 + (i * 125)
                        lbl.place(x=x_pos, y=700)

        def start_program():
            if len(self.selected_platforms) < 1:
                messagebox.showwarning("Warning", "Please select at least one platform.")
            else:
                print("Starting the program...")
                if dp_state == True:
                    print('depop')
                    remove_posting_cross_posting_layout()
                    posting2_layout()
                if gr_state == True:
                    print('grailed')
                    #create filter for this showing that needs to be 60 character limit
                    #as soon as grailed turns true, put that warning label up somewhere on the screen, only when clicked
                if posh_state == True:
                    print('poshmark')
                if ebay_state == True:
                    print('ebay')
                if mercari_state == True:
                    print('mercari')
                if ou_state == True:
                    print('Offer up')
            # if dp_state:
            #   DepopPoster.py
            # if gr_state:
            #     GrailedPoster.py
            # if posh_state:
            #     # PoshPoster.py
            # if ebay_state:
            #     # EbayPoster.py
            # if mercari_state:
            #     # MercariPoster.py
            # if ou_state:
            #     # OuPoster.py 

        posting_title = tk.Label(window, text="Posting", font=("Verdana", 25), bg='gray', fg="red")
        posting_title.place(x=670, y=50)
        start_button = tk.Button(window, text="Start", font=("Tahoma", 20), command=start_program, width=10, height=2)
        start_button.place(x=670, y=850)

        try:
            def dp_button_click():
                global dp_state
                dp_state = not dp_state
                toggle_button_state(dp_button, dp_state, dp_image)
            def gr_button_click():
                global gr_state
                gr_state = not gr_state
                toggle_button_state(gr_button, gr_state, gr_image)
            def posh_button_click():
                global posh_state
                posh_state = not posh_state
                toggle_button_state(posh_button, posh_state, posh_image)
            def ebay_button_click():
                global ebay_state
                ebay_state = not ebay_state
                toggle_button_state(ebay_button, ebay_state, ebay_image)
            def mercari_button_click():
                global mercari_state
                mercari_state = not mercari_state
                toggle_button_state(mercari_button, mercari_state, mercari_image)
            def ou_button_click():
                global ou_state
                ou_state = not ou_state
                toggle_button_state(ou_button, ou_state, ou_image)
        except:
            pass
        #! maybe with this type of code, can pass this into a function like
        #! find some way to set the coordinates to go with the order, and set arguments to have defaults so that at least 1 has to be showing, all others are optional
        self.button_image_upload('all')

        def update_start_button_color():
            # print("len(smaller_icon_labels) " + str(len(smaller_icon_labels)))
            if len(self.smaller_icon_labels) >= 1:
                start_button.config(bg="green")
            else:
                start_button.config(bg="red")
            window.after(100, update_start_button_color)
        update_start_button_color()

    def posting2_layout(self):

        global start_button, fill_in_post, current_photo_index
        def start_excel_info(self):
            # ExtractingImages.py
            # CreatingPostFromScratch.py

            print('starting the excel file making')
        def auto_fill_files(self):
            # Extract_info_from_excel.py
            print('auto fill excel files')

        fill_in_post = tk.Label(window, text="Fill in Post", font=("Verdana", 25), bg='gray', fg="red")
        fill_in_post.place(x=670, y=50)

        start_button = tk.Button(window, text="Start", font=("Tahoma", 20), command=start_excel_info, width=10, height=2)
        start_button.place(x=670, y=850)

        
        #will have to grab the create post from scratch
        # - user has to organize all the pics in the file before
        # -- can either make it easy for each post, or enter the number of pics per file manually before entering the file,
        #     -----program will read the number per file using a for loop, after I extract the number of pic list based on info given to me, then enter according to that
        #     ----also add way to just remove all the files and leave the number of pictures, or leave the text, be able to remove 1 at a time


    ################################    
        # all this would be the script i need to make to replicated this over and over, 
        # would just have to make constraints or use an iterator to multiply the x value y values will be the same for this
    #--------------------------------################################################################
        current_photo_index = 0

        def add_scrollbar(root):
            global photo_index, i, total_listing, index_for_row, add_other_post_layout, post_number, delete_post_button
            photo_index = 0

            #! create method with these images to make this easier to follow, so much small stuff to look at
            # post_number = ((row_loc // 2) * 4) + column_loc #! row loc and column loc are args, 
            #! only thing that would need to be added is one more argument displaying what to do with image
            def add_image(row_loc, column_loc):
                post_number = ((row_loc // 2) * 4) + column_loc
                filepaths = filedialog.askopenfilenames()
                print(f'Filepath Length for this function program thingy: {len(filepaths)}')
                for filepath in filepaths:
                    photo = self.finding_image_path(filepath, 120, 120)
                    image_label = tk.Label(content_frame, image=photo, borderwidth=0, highlightthickness=0)
                    image_label.image = photo
                    self.overall_photo_list[post_number].append(image_label)
                    print('new image label' + str(self.overall_photo_list[post_number]))
                    new_pic_number = self.number_of_pic_list[post_number] + 1
                    self.number_of_pic_list[post_number] = new_pic_number
                self.overall_photo_list[post_number][0].grid(row=row_loc * 4 + 3, column=column_loc)
                self.current_showing_photo_list[post_number] = self.overall_photo_list[post_number][0]
                # number_of_pic_list[post_number].delete(0, 'end')
                print('  ')
                print('pic number list ' + str(self.number_of_pic_list[post_number]))
                print(' ')
                self.number_of_pics_entry_list[post_number].delete(0, 'end')
                self.number_of_pics_entry_list[post_number].insert(0, str(self.number_of_pic_list[post_number]))
                self.current_pic_index[post_number] = len(filepaths)

            def manipulating_image_showing(row_loc, column_loc, function):
                # this gives us the current index of the picture were looking for
                post_number = ((row_loc // 2) * 4) + column_loc
                photo_index = self.current_pic_index[post_number]
                total_photo_index = self.number_of_pic_list[post_number]

                #this chooses the next index we will be using
                if function == 'next':
                    photo_index_num = (photo_index + 1) % total_photo_index
                elif function == 'previous':
                    photo_index_num = (photo_index - 1) % total_photo_index
                og_photo_index = photo_index % total_photo_index

                #changes the current_pic_index to the new pic_index, + or - 1
                self.current_pic_index[post_number] = photo_index_num

                #changes current showing photo to the new pic index we created
                self.current_showing_photo_list[post_number] = self.overall_photo_list[post_number][photo_index_num]

                # this identifies the og_photo_index at its specific position to wipe that picture off the grid
                if total_photo_index > 1:
                    prev_photo = self.overall_photo_list[post_number][og_photo_index]
                    prev_photo.grid_forget()
                    print('forgetting the number')
                #inserts the intended new image that we wish to add onto this
                self.overall_photo_list[post_number][photo_index_num].grid(row=row_loc * 4 + 3, column=column_loc)
                print('printing the picture')
                window.update_idletasks()

            def delete_picture(row_loc, column_loc):
                global post_number
                print(' ')
                extracting_price_text()
                print(' ')
                post_number = ((row_loc // 2) * 4) + column_loc
                pic_to_remove = self.current_showing_photo_list[post_number]
                if pic_to_remove in self.overall_photo_list[post_number]:
                    self.overall_photo_list[post_number].remove(pic_to_remove)
                    pic_to_remove.grid_forget()
                    new_pic_number = self.number_of_pic_list[post_number] - 1
                    self.number_of_pic_list[post_number] = new_pic_number
                manipulating_image_showing(row_loc, column_loc, 'next')
                self.number_of_pics_entry_list[post_number].delete(0, 'end')
                self.number_of_pics_entry_list[post_number].insert(0, str(self.number_of_pic_list[post_number]))
                # extracting_pic_text()
                # extracting_title_text()
                printing_items()
                return post_number

            def extracting_pic_text():
                pic_list = []
                for num_pic in self.number_of_pics_entry_list:
                    num_text = num_pic.get()
                    pic_list.append(num_text)
                print(pic_list)

            def extracting_title_text():
                for text in self.text_entry_text_list[:]:
                    self.text_entry_text_list.remove(text)
                for text_pic in self.text_entry_widget_list:
                    the_text = text_pic.get('1.0', 'end')
                    the_text = the_text.replace('\n', ' ').replace('\t', '   ')
                    self.text_entry_text_list.append(the_text)
                print(the_text)

            def extracting_price_text():
                for text in self.price_entry_text_list[:]:
                    self.price_entry_text_list.remove(text)
                for price in self.price_entry_widget_list:
                    the_price = price.get()
                    self.price_entry_text_list.append(the_price)
                print(the_price)

            frame = tk.Frame(root, width=300, height=200, bg='gray')
            frame.place(x=370, y=110, height = 730, width = 800)
            canvas = tk.Canvas(frame, bg='gray')
            canvas.place(relx=0, rely=0, relwidth=1, relheight=1)
            scrollbar = tk.Scrollbar(frame, command=canvas.yview)
            scrollbar.place(relx=1, rely=0, relheight=1, anchor=tk.NE)
            canvas.configure(yscrollcommand=scrollbar.set)
            content_frame = tk.Frame(canvas)
            canvas.create_window((0, 0), window=content_frame, anchor=tk.NW)
            content_frame.grid_columnconfigure(4, weight=1)

            def printing_items():
                global i
                print('i ' + str(i))
                print(' col ' + str(self.add_another_col_number))
                print(' row ' + str(self.add_another_row_number))
                print(len(self.text_entry_widget_list))
                print(index_for_row)
                extracting_title_text()

            def delete_current_post(row_loc, column_loc):
                global w
                global delete_post_button, index_for_row, add_image_button, previous_button, number_of_pics_entry, price_pic_entry, next_button, image_label, delete_button, title_text
                post_number = ((row_loc // 2) * 4) + column_loc
                print('post_number ' + str(post_number))
                for widget_list in self.widget_lists:
                    try:
                        widget_list[post_number].grid_forget()
                    except:
                        print('pass')
                    # remove_post_layout.invoke()
                update_label('minus', 'postnum', post_number)

                count = 0
                post_count = 0
                for ind_list in self.widget_lists:
                    for i, widget in enumerate(ind_list):
                        print(' i ' + str(i))
                        if i >= post_number:
                            print(' have to move ')
                            new_column = i % 4
                            if new_column == 0:
                                #change the row and make column == 3
                                new_row = 1 #previous row - 1
                            else:
                                new_column -= 1
                            widget.grid_configure(column = new_column)

                # for ind_list in total_list:
                #     count = 0
                #     for i, widget in enumerate(ind_list):

                #         if i >= post_number:
                #             print('widget' + str(widget))
                #             print('count ' + str(count))
                #             widget.grid_configure(column = column_loc + count)
                #             count += 1

                return post_number

            def posting2_listing_layout(row, row_offset, col, col_offset):
                global index_for_row, add_image_button, previous_button, number_of_pics_entry, price_pic_entry, next_button, image_label, delete_button, title_text, delete_post_button
                for row_index in range(row_offset, row + row_offset):
                    for col_index in range(col_offset, col + col_offset):
                        actual_row = row_index * 2
                        actual_col = col_index

                        add_image_button = tk.Button(content_frame, text="Add Images", command=lambda r=actual_row, c=actual_col: add_image(r, c))
                        add_image_button.grid(row=actual_row * 4, column=actual_col, padx=61, pady=3)
                        self.add_image_widget_list.append(add_image_button)

                        previous_button = tk.Button(content_frame, text="Previous", command=lambda r=actual_row, c=actual_col: manipulating_image_showing(r, c, 'previous'))
                        previous_button.grid(row=actual_row * 4 + 1, column=actual_col, padx=10, pady=5, sticky='w')
                        self.previous_button_widget_list.append(previous_button)

                        number_of_pics_entry = tk.Entry(content_frame, width=2)
                        number_of_pics_entry.grid(row=actual_row * 4 + 1, column=actual_col, padx=5, pady=3)
                        number_of_pics_entry.insert(0, 0)
                        self.number_of_pics_entry_list.append(number_of_pics_entry)

                        price_pic_entry = tk.Entry(content_frame, width=3)
                        price_pic_entry.grid(row=actual_row * 4 + 1, column=actual_col, padx=50, pady=3, sticky='e')
                        self.price_entry_widget_list.append(price_pic_entry)

                        next_button = tk.Button(content_frame, text="Next", command=lambda r=actual_row, c=actual_col: manipulating_image_showing(r, c, 'next'))
                        next_button.grid(row=actual_row * 4 + 1, column=actual_col, padx=(2, 5), pady=3, sticky='e')
                        self.next_button_widget_list.append(next_button)

                        delete_post_button = tk.Button(content_frame, text='X', command=lambda r=actual_row, c=actual_col: (delete_current_post(r, c), manipulate_row_number('dec')))
                        delete_post_button.grid(row=actual_row * 4 + 4, column=actual_col, sticky='ne')
                        self.delete_post_button_widget_list.append(delete_post_button)

                        image_label = tk.Label(content_frame, borderwidth=0, highlightthickness=0)
                        image_label.grid(row=actual_row * 4 + 3, column=actual_col, padx=(2, 5), pady=50)
                        self.image_label_widget_list.append(image_label)

                        delete_button = tk.Button(content_frame, text='X', borderwidth=0, highlightthickness=0, command=lambda r=actual_row, c=actual_col: delete_picture(r, c), fg='red')
                        delete_button.grid(row=actual_row * 4 + 3, column=actual_col, padx=20, sticky='ne')
                        self.delete_button_widget_list.append(delete_button)

                        title_text = tk.Text(content_frame, font=("Times New Roman", 10), height=4, width=24)
                        title_text.grid(row=actual_row * 4 + 4, column=actual_col, padx=(2, 5), pady=5)
                        self.text_entry_widget_list.append(title_text)

                        self.current_pic_index.append(0)

                        self.number_of_pic_list.append(0)
                        self.overall_photo_list.append([])
                        self.current_showing_photo_list.append('')
            index_for_row = 1
            posting2_listing_layout(index_for_row, 0, 4 ,0)

            self.add_another_col_number = 3
            self.add_another_row_number = 1
            i = 0
            printing_items()

            def manipulate_row_number(operation):
                self.add_another_row_number = int(len(self.text_entry_widget_list) // 4)
                self.add_another_col_number = int(len(self.text_entry_widget_list) % 4)
                if operation == 'dec':
                    self.add_another_col_number += 1

            def update_label(var, var2, num_post):
                global post_number

                if var == 'minus':
                    total_listing = str(len(self.text_entry_widget_list) - 1)
                    if var2 == 'last':
                        the_index_to_remove = -1

                    elif var2 == 'postnum':
                        the_index_to_remove = num_post + 1

                    for widget_list in self.widget_lists:
                        widget_list = widget_list[:the_index_to_remove]
                elif var == 'plus':
                    total_listing = str(len(self.ext_entry_widget_list) + 1)
                print('total_listing' + str(total_listing))
                total_amt_of_listings.config(text=total_listing)
                printing_items()

            def posting2_listing_remove_layout():#row_loc, col_loc
                global index_for_row, add_image_button, previous_button, number_of_pics_entry, price_pic_entry, next_button, image_label, delete_button, title_text, delete_post_button

                for widget in self.widget_lists:
                    widget[-1].grid_forget()
                #would set this to new positions but would have to shift all the currentn
                # for i, row in enumerate(grid):
                #     for j, button in enumerate(row):
                #         # Calculate the new position based on the updated grid size
                #         new_position = (i, j)
                #         # Update the button's position on the grid
                #         button.set_position(new_position)

            def validate_input(new_text):
                if not new_text.isdigit():
                    return False
                return True

            the_column = 1
            #! a little confused on the index_for_row and index_for_column on this, have to do more work on this
            add_other_post_layout = tk.Button(window, text="+", font=("Tahoma", 12))
            add_other_post_layout.configure(command=lambda: [update_label('plus', 'dont', 'worry'), manipulate_row_number('inc'), posting2_listing_layout(index_for_row, self.add_another_row_number, the_column, self.add_another_col_number)])
            add_other_post_layout.place(x=1050, y=30)

            remove_post_layout = tk.Button(window, text="-", font=("Tahoma", 12), width = 2)
            remove_post_layout.configure(command=lambda: [manipulate_row_number('dec'), posting2_listing_remove_layout(), update_label('minus', 'last', 'oops'), remove_post_amount_button()])#update_label(),  r=actual_row, c=actual_col
            remove_post_layout.place(x=950, y=30)

            validate_cmd = window.register(validate_input)
            amt_to_add_text = tk.Entry(window, validate="key", validatecommand=(validate_cmd, '%P'), font=("Tahoma", 12), width=3)
            amt_to_add_text.place(x=1000, y=30)

            def remove_post_amount_button():
                #still needs some work on this
                the_number= amt_to_add_text.get()
                print('the number' + str(the_number))
                if the_number == '':
                    the_number = 1
                else:
                    for i in range(int(the_number)):
                        remove_post_layout.invoke()

            total_listing = str(len(self.text_entry_widget_list))
            total_amt_of_listings = tk.Label(window, text=total_listing, font=("Verdana", 25), bg='gray', fg="red")
            total_amt_of_listings.place(x=1100, y=30)

            def update_scroll_region(event):
                canvas.configure(scrollregion=canvas.bbox("all"))
            content_frame.bind("<Configure>", update_scroll_region)
        add_scrollbar(window)

test = MyEmployeeGUI()
test.posting2_layout()
test.run()
